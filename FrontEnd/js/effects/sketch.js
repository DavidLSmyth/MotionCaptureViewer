var vs_downsample="varying vec2 vUv; void main() { vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 ); gl_Position = projectionMatrix * mvPosition; vUv = uv; }";
var fs_downsample ="varying vec2 vUv; uniform sampler2D tDiffuse; uniform vec2 delta; float random(vec3 scale,float seed){return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453+seed);} void main() { vec4 color=vec4(0.0); float total=0.0; float offset=random(vec3(12.9898,78.233,151.7182),0.0); for(float t=-30.0;t<=30.0;t++){ float percent=(t+offset-0.5)/30.0; float weight=1.0-abs(percent); vec4 sample=texture2D(tDiffuse,vUv+delta*percent); sample.rgb*=sample.a; color+=sample*weight; total+=weight;} gl_FragColor=color/total; gl_FragColor.rgb/=gl_FragColor.a+0.00001;}";

var vs_post = "varying vec3 vNormal; varying vec3 vPosition; varying vec3 vLight; vec4 lightPosition = vec4( 0., 0., -10., 1. );";
vs_post +="void main() { vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 ); gl_Position = projectionMatrix * mvPosition; vNormal = normalMatrix * normal; vPosition = mvPosition.xyz; vLight = ( viewMatrix * lightPosition ).xyz;}";
var fs_post ="varying vec3 vNormal; varying vec3 vPosition; varying vec3 vLight; uniform int renderDepth;";
fs_post += "void main() { vec3 ambient = vec3( .1 ); vec3 n = normalize( vNormal ); vec3 s = normalize( vLight - vPosition ); vec3 color = vec3( .75 ); vec3 diffuse = color * max( 0.0, dot( n, s ) ) * vec3( 1. ); vec3 r = - reflect( vLight, n );  r = normalize( r ); vec3 v = - vPosition.xyz; v = normalize( v ); float shininess = 10.; float rm = 1. - max( 0., dot( n, v ) ); vec3 rim = vec3( pow( rm, 2. ) ); vec3 specular; if( shininess != 0.0 ) { specular = vec3( 1. ) * vec3( 1. ) * pow( max( 0.0, dot( r, v ) ), shininess ); } else { specular = vec3( 0. ); } specular = vec3( 0.); rim = vec3( 0. ); if( renderDepth == 0 ) {  gl_FragColor = vec4( rim + ambient + diffuse + specular, 1. ); } else { float z = clamp( 0., 1., gl_FragCoord.w * 10. ); gl_FragColor = vec4( .5 * ( 1. + n.x ), .5 * ( 1. + n.y ), z, 1. );}}";

var vs_render = " varying vec2 vUv; void main() { vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 ); gl_Position = projectionMatrix * mvPosition; vUv = uv; } ";
var fs_render = " uniform sampler2D tDiffuse; uniform sampler2D tColor; uniform sampler2D tNoise; uniform sampler2D tPaper; uniform sampler2D tBlur; uniform vec2 resolution; varying vec2 vUv;";
fs_render+="void main() { float x = 1.0 / resolution.x; float y = 1.0 / resolution.y; vec4 horizEdge = vec4( 0.0 ); horizEdge -= texture2D( tDiffuse, vec2( vUv.x - x, vUv.y - y ) ) * 1.0; horizEdge -= texture2D( tDiffuse, vec2( vUv.x - x, vUv.y     ) ) * 2.0; horizEdge -= texture2D( tDiffuse, vec2( vUv.x - x, vUv.y + y ) ) * 1.0; horizEdge += texture2D( tDiffuse, vec2( vUv.x + x, vUv.y - y ) ) * 1.0; horizEdge += texture2D( tDiffuse, vec2( vUv.x + x, vUv.y ) ) * 2.0; horizEdge += texture2D( tDiffuse, vec2( vUv.x + x, vUv.y + y ) ) * 1.0; vec4 vertEdge = vec4( 0.0 ); vertEdge -= texture2D( tDiffuse, vec2( vUv.x - x, vUv.y - y ) ) * 1.0; vertEdge -= texture2D( tDiffuse, vec2( vUv.x    , vUv.y - y ) ) * 2.0; vertEdge -= texture2D( tDiffuse, vec2( vUv.x + x, vUv.y - y ) ) * 1.0; vertEdge += texture2D( tDiffuse, vec2( vUv.x - x, vUv.y + y ) ) * 1.0; vertEdge += texture2D( tDiffuse, vec2( vUv.x    , vUv.y + y ) ) * 2.0; vertEdge += texture2D( tDiffuse, vec2( vUv.x + x, vUv.y + y ) ) * 1.0; vec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb)); float e = length( edge ); float z = texture2D( tDiffuse, vUv ).b; vec3 b = texture2D( tColor, vUv ).rgb; vec3 a = texture2D( tBlur, vUv ).rgb; vec3 c = vec3( 1. ) - ( vec3( 1. ) - a ) * ( vec3( 1. ) - b ); vec2 nUV = vec2( mod( vUv.x * resolution.x / 256., 1. ), mod( vUv.y * resolution.y / 256., 1. ) ); float s = mix( 1., texture2D( tNoise, nUV ).r, 1. - c.r ); s -= .15 * e * z; vec2 pUV = vec2( mod( vUv.x * resolution.x / 512., 1. ), mod( vUv.y * resolution.y / 512., 1. ) ); vec3 color = texture2D( tPaper, pUV ).rgb * s; gl_FragColor = vec4( color, 1. ); }";
